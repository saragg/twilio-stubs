from twilio.base import deserialize as deserialize, values as values
from twilio.base.instance_context import InstanceContext as InstanceContext
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page
from typing import Any

class TaskQueueRealTimeStatisticsList(ListResource):
    def __init__(self, version: Any, workspace_sid: Any, task_queue_sid: Any) -> None: ...
    def get(self): ...
    def __call__(self): ...

class TaskQueueRealTimeStatisticsPage(Page):
    def __init__(self, version: Any, response: Any, solution: Any) -> None: ...
    def get_instance(self, payload: Any): ...

class TaskQueueRealTimeStatisticsContext(InstanceContext):
    def __init__(self, version: Any, workspace_sid: Any, task_queue_sid: Any) -> None: ...
    def fetch(self, task_channel: Any = ...): ...

class TaskQueueRealTimeStatisticsInstance(InstanceResource):
    def __init__(self, version: Any, payload: Any, workspace_sid: Any, task_queue_sid: Any) -> None: ...
    @property
    def account_sid(self): ...
    @property
    def activity_statistics(self): ...
    @property
    def longest_task_waiting_age(self): ...
    @property
    def longest_task_waiting_sid(self): ...
    @property
    def longest_relative_task_age_in_queue(self): ...
    @property
    def longest_relative_task_sid_in_queue(self): ...
    @property
    def task_queue_sid(self): ...
    @property
    def tasks_by_priority(self): ...
    @property
    def tasks_by_status(self): ...
    @property
    def total_available_workers(self): ...
    @property
    def total_eligible_workers(self): ...
    @property
    def total_tasks(self): ...
    @property
    def workspace_sid(self): ...
    @property
    def url(self): ...
    def fetch(self, task_channel: Any = ...): ...
