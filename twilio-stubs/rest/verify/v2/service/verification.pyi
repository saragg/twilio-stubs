from twilio.base import deserialize as deserialize, serialize as serialize, values as values
from twilio.base.instance_context import InstanceContext as InstanceContext
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page
from typing import Any, Optional

class VerificationList(ListResource):
    def __init__(self, version: Any, service_sid: Any) -> None: ...
    def create(self, to: Any, channel: Any, custom_friendly_name: Any = ..., custom_message: Any = ..., send_digits: Any = ..., locale: Any = ..., custom_code: Any = ..., amount: Any = ..., payee: Any = ..., rate_limits: Any = ..., channel_configuration: Any = ..., app_hash: Any = ...): ...
    def get(self, sid: Any): ...
    def __call__(self, sid: Any): ...

class VerificationPage(Page):
    def __init__(self, version: Any, response: Any, solution: Any) -> None: ...
    def get_instance(self, payload: Any): ...

class VerificationContext(InstanceContext):
    def __init__(self, version: Any, service_sid: Any, sid: Any) -> None: ...
    def update(self, status: Any): ...
    def fetch(self): ...

class VerificationInstance(InstanceResource):
    class Channel:
        SMS: str = ...
        CALL: str = ...
        EMAIL: str = ...
    class Status:
        CANCELED: str = ...
        APPROVED: str = ...
    def __init__(self, version: Any, payload: Any, service_sid: Any, sid: Optional[Any] = ...) -> None: ...
    @property
    def sid(self): ...
    @property
    def service_sid(self): ...
    @property
    def account_sid(self): ...
    @property
    def to(self): ...
    @property
    def channel(self): ...
    @property
    def status(self): ...
    @property
    def valid(self): ...
    @property
    def lookup(self): ...
    @property
    def amount(self): ...
    @property
    def payee(self): ...
    @property
    def send_code_attempts(self): ...
    @property
    def date_created(self): ...
    @property
    def date_updated(self): ...
    @property
    def url(self): ...
    def update(self, status: Any): ...
    def fetch(self): ...
