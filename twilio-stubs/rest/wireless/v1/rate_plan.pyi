from twilio.base import deserialize as deserialize, serialize as serialize, values as values
from twilio.base.instance_context import InstanceContext as InstanceContext
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page
from typing import Any, Optional

class RatePlanList(ListResource):
    def __init__(self, version: Any) -> None: ...
    def stream(self, limit: Optional[Any] = ..., page_size: Optional[Any] = ...): ...
    def list(self, limit: Optional[Any] = ..., page_size: Optional[Any] = ...): ...
    def page(self, page_token: Any = ..., page_number: Any = ..., page_size: Any = ...): ...
    def get_page(self, target_url: Any): ...
    def create(self, unique_name: Any = ..., friendly_name: Any = ..., data_enabled: Any = ..., data_limit: Any = ..., data_metering: Any = ..., messaging_enabled: Any = ..., voice_enabled: Any = ..., national_roaming_enabled: Any = ..., international_roaming: Any = ..., national_roaming_data_limit: Any = ..., international_roaming_data_limit: Any = ...): ...
    def get(self, sid: Any): ...
    def __call__(self, sid: Any): ...

class RatePlanPage(Page):
    def __init__(self, version: Any, response: Any, solution: Any) -> None: ...
    def get_instance(self, payload: Any): ...

class RatePlanContext(InstanceContext):
    def __init__(self, version: Any, sid: Any) -> None: ...
    def fetch(self): ...
    def update(self, unique_name: Any = ..., friendly_name: Any = ...): ...
    def delete(self): ...

class RatePlanInstance(InstanceResource):
    class DataLimitStrategy:
        BLOCK: str = ...
        THROTTLE: str = ...
    def __init__(self, version: Any, payload: Any, sid: Optional[Any] = ...) -> None: ...
    @property
    def sid(self): ...
    @property
    def unique_name(self): ...
    @property
    def account_sid(self): ...
    @property
    def friendly_name(self): ...
    @property
    def data_enabled(self): ...
    @property
    def data_metering(self): ...
    @property
    def data_limit(self): ...
    @property
    def messaging_enabled(self): ...
    @property
    def voice_enabled(self): ...
    @property
    def national_roaming_enabled(self): ...
    @property
    def national_roaming_data_limit(self): ...
    @property
    def international_roaming(self): ...
    @property
    def international_roaming_data_limit(self): ...
    @property
    def date_created(self): ...
    @property
    def date_updated(self): ...
    @property
    def url(self): ...
    def fetch(self): ...
    def update(self, unique_name: Any = ..., friendly_name: Any = ...): ...
    def delete(self): ...
