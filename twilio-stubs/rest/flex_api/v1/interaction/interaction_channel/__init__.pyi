from typing import Optional, Any

from twilio.base import deserialize as deserialize, serialize as serialize, values as values
from twilio.base.instance_context import InstanceContext as InstanceContext
from twilio.base.instance_resource import InstanceResource as InstanceResource
from twilio.base.list_resource import ListResource as ListResource
from twilio.base.page import Page as Page
from twilio.rest.flex_api.v1.interaction.interaction_channel.interaction_channel_invite import InteractionChannelInviteList as InteractionChannelInviteList
from twilio.rest.flex_api.v1.interaction.interaction_channel.interaction_channel_participant import InteractionChannelParticipantList as InteractionChannelParticipantList

class InteractionChannelList(ListResource):
    def __init__(self, version, interaction_sid) -> None: ...
    def stream(self, limit: Optional[Any] | None = ..., page_size: Optional[Any] | None = ...): ...
    def list(self, limit: Optional[Any] | None = ..., page_size: Optional[Any] | None = ...): ...
    def page(self, page_token=..., page_number=..., page_size=...): ...
    def get_page(self, target_url): ...
    def get(self, sid): ...
    def __call__(self, sid): ...

class InteractionChannelPage(Page):
    def __init__(self, version, response, solution) -> None: ...
    def get_instance(self, payload): ...

class InteractionChannelContext(InstanceContext):
    def __init__(self, version, interaction_sid, sid) -> None: ...
    def fetch(self): ...
    def update(self, status, routing=...): ...
    @property
    def invites(self): ...
    @property
    def participants(self): ...

class InteractionChannelInstance(InstanceResource):
    class Status:
        CLOSED: str
        WRAPUP: str
    class Type:
        VOICE: str
        SMS: str
        EMAIL: str
        WEB: str
        WHATSAPP: str
        CHAT: str
        MESSENGER: str
        GBM: str
    class ChannelStatus:
        SETUP: str
        ACTIVE: str
        FAILED: str
        CLOSED: str
    def __init__(self, version, payload, interaction_sid, sid: Any | None = ...) -> None: ...
    @property
    def sid(self): ...
    @property
    def interaction_sid(self): ...
    @property
    def type(self): ...
    @property
    def status(self): ...
    @property
    def error_code(self): ...
    @property
    def error_message(self): ...
    @property
    def url(self): ...
    @property
    def links(self): ...
    def fetch(self): ...
    def update(self, status, routing=...): ...
    @property
    def invites(self): ...
    @property
    def participants(self): ...
