from twilio.base.obsolete import deprecated_method as deprecated_method
from twilio.twiml import TwiML as TwiML, format_language as format_language
from typing import Any, Optional

class VoiceResponse(TwiML):
    name: str = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def connect(self, action: Optional[Any] = ..., method: Optional[Any] = ..., **kwargs: Any): ...
    def dial(self, number: Optional[Any] = ..., action: Optional[Any] = ..., method: Optional[Any] = ..., timeout: Optional[Any] = ..., hangup_on_star: Optional[Any] = ..., time_limit: Optional[Any] = ..., caller_id: Optional[Any] = ..., record: Optional[Any] = ..., trim: Optional[Any] = ..., recording_status_callback: Optional[Any] = ..., recording_status_callback_method: Optional[Any] = ..., recording_status_callback_event: Optional[Any] = ..., answer_on_bridge: Optional[Any] = ..., ring_tone: Optional[Any] = ..., **kwargs: Any): ...
    def echo(self, **kwargs: Any): ...
    def enqueue(self, name: Optional[Any] = ..., action: Optional[Any] = ..., method: Optional[Any] = ..., wait_url: Optional[Any] = ..., wait_url_method: Optional[Any] = ..., workflow_sid: Optional[Any] = ..., **kwargs: Any): ...
    def gather(self, input: Optional[Any] = ..., action: Optional[Any] = ..., method: Optional[Any] = ..., timeout: Optional[Any] = ..., speech_timeout: Optional[Any] = ..., max_speech_time: Optional[Any] = ..., profanity_filter: Optional[Any] = ..., finish_on_key: Optional[Any] = ..., num_digits: Optional[Any] = ..., partial_result_callback: Optional[Any] = ..., partial_result_callback_method: Optional[Any] = ..., language: Optional[Any] = ..., hints: Optional[Any] = ..., barge_in: Optional[Any] = ..., debug: Optional[Any] = ..., action_on_empty_result: Optional[Any] = ..., speech_model: Optional[Any] = ..., enhanced: Optional[Any] = ..., **kwargs: Any): ...
    def hangup(self, **kwargs: Any): ...
    def leave(self, **kwargs: Any): ...
    def pause(self, length: Optional[Any] = ..., **kwargs: Any): ...
    def play(self, url: Optional[Any] = ..., loop: Optional[Any] = ..., digits: Optional[Any] = ..., **kwargs: Any): ...
    def queue(self, name: Any, url: Optional[Any] = ..., method: Optional[Any] = ..., reservation_sid: Optional[Any] = ..., post_work_activity_sid: Optional[Any] = ..., **kwargs: Any): ...
    def record(self, action: Optional[Any] = ..., method: Optional[Any] = ..., timeout: Optional[Any] = ..., finish_on_key: Optional[Any] = ..., max_length: Optional[Any] = ..., play_beep: Optional[Any] = ..., trim: Optional[Any] = ..., recording_status_callback: Optional[Any] = ..., recording_status_callback_method: Optional[Any] = ..., recording_status_callback_event: Optional[Any] = ..., transcribe: Optional[Any] = ..., transcribe_callback: Optional[Any] = ..., **kwargs: Any): ...
    def redirect(self, url: Any, method: Optional[Any] = ..., **kwargs: Any): ...
    def reject(self, reason: Optional[Any] = ..., **kwargs: Any): ...
    def say(self, message: Optional[Any] = ..., voice: Optional[Any] = ..., loop: Optional[Any] = ..., language: Optional[Any] = ..., **kwargs: Any): ...
    def sms(self, message: Any, to: Optional[Any] = ..., from_: Optional[Any] = ..., action: Optional[Any] = ..., method: Optional[Any] = ..., status_callback: Optional[Any] = ..., **kwargs: Any): ...
    def pay(self, input: Optional[Any] = ..., action: Optional[Any] = ..., bank_account_type: Optional[Any] = ..., status_callback: Optional[Any] = ..., status_callback_method: Optional[Any] = ..., timeout: Optional[Any] = ..., max_attempts: Optional[Any] = ..., security_code: Optional[Any] = ..., postal_code: Optional[Any] = ..., min_postal_code_length: Optional[Any] = ..., payment_connector: Optional[Any] = ..., payment_method: Optional[Any] = ..., token_type: Optional[Any] = ..., charge_amount: Optional[Any] = ..., currency: Optional[Any] = ..., description: Optional[Any] = ..., valid_card_types: Optional[Any] = ..., language: Optional[Any] = ..., **kwargs: Any): ...
    def prompt(self, for_: Optional[Any] = ..., error_type: Optional[Any] = ..., card_type: Optional[Any] = ..., attempt: Optional[Any] = ..., **kwargs: Any): ...
    def start(self, action: Optional[Any] = ..., method: Optional[Any] = ..., **kwargs: Any): ...
    def stop(self, **kwargs: Any): ...
    def refer(self, action: Optional[Any] = ..., method: Optional[Any] = ..., **kwargs: Any): ...

class Refer(TwiML):
    name: str = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def sip(self, sip_url: Any, **kwargs: Any): ...
    def refer_sip(self, sip_url: Any, **kwargs: Any): ...

class ReferSip(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, sip_url: Any, **kwargs: Any) -> None: ...

class Stop(TwiML):
    name: str = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def stream(self, name: Optional[Any] = ..., connector_name: Optional[Any] = ..., url: Optional[Any] = ..., track: Optional[Any] = ..., **kwargs: Any): ...
    def siprec(self, name: Optional[Any] = ..., connector_name: Optional[Any] = ..., track: Optional[Any] = ..., **kwargs: Any): ...

class Siprec(TwiML):
    name: str = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def parameter(self, name: Optional[Any] = ..., value: Optional[Any] = ..., **kwargs: Any): ...

class Parameter(TwiML):
    name: str = ...
    def __init__(self, **kwargs: Any) -> None: ...

class Stream(TwiML):
    name: str = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def parameter(self, name: Optional[Any] = ..., value: Optional[Any] = ..., **kwargs: Any): ...

class Start(TwiML):
    name: str = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def stream(self, name: Optional[Any] = ..., connector_name: Optional[Any] = ..., url: Optional[Any] = ..., track: Optional[Any] = ..., **kwargs: Any): ...
    def siprec(self, name: Optional[Any] = ..., connector_name: Optional[Any] = ..., track: Optional[Any] = ..., **kwargs: Any): ...

class Prompt(TwiML):
    name: str = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def say(self, message: Optional[Any] = ..., voice: Optional[Any] = ..., loop: Optional[Any] = ..., language: Optional[Any] = ..., **kwargs: Any): ...
    def play(self, url: Optional[Any] = ..., loop: Optional[Any] = ..., digits: Optional[Any] = ..., **kwargs: Any): ...
    def pause(self, length: Optional[Any] = ..., **kwargs: Any): ...

class Pause(TwiML):
    name: str = ...
    def __init__(self, **kwargs: Any) -> None: ...

class Play(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, url: Optional[Any] = ..., **kwargs: Any) -> None: ...

class Say(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, message: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def break_(self, strength: Optional[Any] = ..., time: Optional[Any] = ..., **kwargs: Any): ...
    def ssml_break(self, strength: Optional[Any] = ..., time: Optional[Any] = ..., **kwargs: Any): ...
    def emphasis(self, words: Any, level: Optional[Any] = ..., **kwargs: Any): ...
    def ssml_emphasis(self, words: Any, level: Optional[Any] = ..., **kwargs: Any): ...
    def lang(self, words: Any, xml_lang: Optional[Any] = ..., **kwargs: Any): ...
    def ssml_lang(self, words: Any, xml_lang: Optional[Any] = ..., **kwargs: Any): ...
    def p(self, words: Any, **kwargs: Any): ...
    def ssml_p(self, words: Any, **kwargs: Any): ...
    def phoneme(self, words: Any, alphabet: Optional[Any] = ..., ph: Optional[Any] = ..., **kwargs: Any): ...
    def ssml_phoneme(self, words: Any, alphabet: Optional[Any] = ..., ph: Optional[Any] = ..., **kwargs: Any): ...
    def prosody(self, words: Any, volume: Optional[Any] = ..., rate: Optional[Any] = ..., pitch: Optional[Any] = ..., **kwargs: Any): ...
    def ssml_prosody(self, words: Any, volume: Optional[Any] = ..., rate: Optional[Any] = ..., pitch: Optional[Any] = ..., **kwargs: Any): ...
    def s(self, words: Any, **kwargs: Any): ...
    def ssml_s(self, words: Any, **kwargs: Any): ...
    def say_as(self, words: Any, interpret_as: Optional[Any] = ..., role: Optional[Any] = ..., **kwargs: Any): ...
    def ssml_say_as(self, words: Any, interpret_as: Optional[Any] = ..., role: Optional[Any] = ..., **kwargs: Any): ...
    def sub(self, words: Any, alias: Optional[Any] = ..., **kwargs: Any): ...
    def ssml_sub(self, words: Any, alias: Optional[Any] = ..., **kwargs: Any): ...
    def w(self, words: Any, role: Optional[Any] = ..., **kwargs: Any): ...
    def ssml_w(self, words: Any, role: Optional[Any] = ..., **kwargs: Any): ...

class SsmlW(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, words: Any, **kwargs: Any) -> None: ...

class SsmlSub(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, words: Any, **kwargs: Any) -> None: ...

class SsmlSayAs(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, words: Any, **kwargs: Any) -> None: ...

class SsmlS(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, words: Any, **kwargs: Any) -> None: ...

class SsmlProsody(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, words: Any, **kwargs: Any) -> None: ...

class SsmlPhoneme(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, words: Any, **kwargs: Any) -> None: ...

class SsmlP(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, words: Any, **kwargs: Any) -> None: ...

class SsmlLang(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, words: Any, **kwargs: Any) -> None: ...

class SsmlEmphasis(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, words: Any, **kwargs: Any) -> None: ...

class SsmlBreak(TwiML):
    name: str = ...
    def __init__(self, **kwargs: Any) -> None: ...

class Pay(TwiML):
    name: str = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def prompt(self, for_: Optional[Any] = ..., error_type: Optional[Any] = ..., card_type: Optional[Any] = ..., attempt: Optional[Any] = ..., **kwargs: Any): ...
    def parameter(self, name: Optional[Any] = ..., value: Optional[Any] = ..., **kwargs: Any): ...

class Sms(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, message: Any, **kwargs: Any) -> None: ...

class Reject(TwiML):
    name: str = ...
    def __init__(self, **kwargs: Any) -> None: ...

class Redirect(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, url: Any, **kwargs: Any) -> None: ...

class Record(TwiML):
    name: str = ...
    def __init__(self, **kwargs: Any) -> None: ...

class Queue(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, name: Any, **kwargs: Any) -> None: ...

class Leave(TwiML):
    name: str = ...
    def __init__(self, **kwargs: Any) -> None: ...

class Hangup(TwiML):
    name: str = ...
    def __init__(self, **kwargs: Any) -> None: ...

class Gather(TwiML):
    name: str = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def say(self, message: Optional[Any] = ..., voice: Optional[Any] = ..., loop: Optional[Any] = ..., language: Optional[Any] = ..., **kwargs: Any): ...
    def pause(self, length: Optional[Any] = ..., **kwargs: Any): ...
    def play(self, url: Optional[Any] = ..., loop: Optional[Any] = ..., digits: Optional[Any] = ..., **kwargs: Any): ...

class Enqueue(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, name: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def task(self, body: Any, priority: Optional[Any] = ..., timeout: Optional[Any] = ..., **kwargs: Any): ...

class Task(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, body: Any, **kwargs: Any) -> None: ...

class Echo(TwiML):
    name: str = ...
    def __init__(self, **kwargs: Any) -> None: ...

class Dial(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, number: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def client(self, identity: Optional[Any] = ..., url: Optional[Any] = ..., method: Optional[Any] = ..., status_callback_event: Optional[Any] = ..., status_callback: Optional[Any] = ..., status_callback_method: Optional[Any] = ..., **kwargs: Any): ...
    def conference(self, name: Any, muted: Optional[Any] = ..., beep: Optional[Any] = ..., start_conference_on_enter: Optional[Any] = ..., end_conference_on_exit: Optional[Any] = ..., wait_url: Optional[Any] = ..., wait_method: Optional[Any] = ..., max_participants: Optional[Any] = ..., record: Optional[Any] = ..., region: Optional[Any] = ..., coach: Optional[Any] = ..., trim: Optional[Any] = ..., status_callback_event: Optional[Any] = ..., status_callback: Optional[Any] = ..., status_callback_method: Optional[Any] = ..., recording_status_callback: Optional[Any] = ..., recording_status_callback_method: Optional[Any] = ..., recording_status_callback_event: Optional[Any] = ..., event_callback_url: Optional[Any] = ..., **kwargs: Any): ...
    def number(self, phone_number: Any, send_digits: Optional[Any] = ..., url: Optional[Any] = ..., method: Optional[Any] = ..., status_callback_event: Optional[Any] = ..., status_callback: Optional[Any] = ..., status_callback_method: Optional[Any] = ..., byoc: Optional[Any] = ..., **kwargs: Any): ...
    def queue(self, name: Any, url: Optional[Any] = ..., method: Optional[Any] = ..., reservation_sid: Optional[Any] = ..., post_work_activity_sid: Optional[Any] = ..., **kwargs: Any): ...
    def sim(self, sim_sid: Any, **kwargs: Any): ...
    def sip(self, sip_url: Any, username: Optional[Any] = ..., password: Optional[Any] = ..., url: Optional[Any] = ..., method: Optional[Any] = ..., status_callback_event: Optional[Any] = ..., status_callback: Optional[Any] = ..., status_callback_method: Optional[Any] = ..., **kwargs: Any): ...

class Sip(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, sip_url: Any, **kwargs: Any) -> None: ...

class Sim(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, sim_sid: Any, **kwargs: Any) -> None: ...

class Number(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, phone_number: Any, **kwargs: Any) -> None: ...

class Conference(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, name: Any, **kwargs: Any) -> None: ...

class Client(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, identity: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def identity(self, client_identity: Any, **kwargs: Any): ...
    def parameter(self, name: Optional[Any] = ..., value: Optional[Any] = ..., **kwargs: Any): ...

class Identity(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, client_identity: Any, **kwargs: Any) -> None: ...

class Connect(TwiML):
    name: str = ...
    def __init__(self, **kwargs: Any) -> None: ...
    def room(self, name: Any, participant_identity: Optional[Any] = ..., **kwargs: Any): ...
    def autopilot(self, name: Any, **kwargs: Any): ...
    def stream(self, name: Optional[Any] = ..., connector_name: Optional[Any] = ..., url: Optional[Any] = ..., track: Optional[Any] = ..., **kwargs: Any): ...

class Autopilot(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, name: Any, **kwargs: Any) -> None: ...

class Room(TwiML):
    name: str = ...
    value: Any = ...
    def __init__(self, name: Any, **kwargs: Any) -> None: ...
